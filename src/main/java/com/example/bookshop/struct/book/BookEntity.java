package com.example.bookshop.struct.book;


import com.example.bookshop.struct.book.author.AuthorEntity;
import com.example.bookshop.struct.book.file.BookFileEntity;
import com.example.bookshop.struct.book.links.Book2UserTypeEntity;
import com.example.bookshop.struct.book.review.BookReviewEntity;
import com.example.bookshop.struct.genre.GenreEntity;
import com.example.bookshop.struct.tags.TagEntity;
import com.example.bookshop.struct.user.UserEntity;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.io.Serializable;
import java.util.*;

@Entity
@Table(name = "book")
@Setter
@Getter

public class BookEntity implements Serializable {


        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @ApiModelProperty("id generated by db automatically")
        private Integer id;

        @Column(name = "pub_date")
        @ApiModelProperty("date of book publication")
        private Date pubDate;

        @ManyToMany(fetch = FetchType.LAZY)
        @JoinTable(name = "book2author",
                joinColumns = {@JoinColumn(name = "book_id")},
                inverseJoinColumns = {@JoinColumn(name = "author_id")})
        private List<AuthorEntity> authors;

        @Column(name = "is_bestseller")
        @ApiModelProperty("if isBestseller = 1 so the book is considered to be bestseller and if 0 the book is not a " +
                "bestseller")
        private Integer isBesteller;

        @ApiModelProperty("mnemonical identity sequence of characters")
        private String slug;

        @ApiModelProperty("book title")
        private String title;

        @ApiModelProperty("book url")
        private String image;

        @Column(columnDefinition = "TEXT")
        @ApiModelProperty("book description text")
        private String description;

        @Column(name = "price")
        @ApiModelProperty("book price without discount")
        @JsonProperty("price")
        private Integer priceOld;

        @Column(name = "discount")
        @ApiModelProperty("discount value for book")
        @JsonProperty("discount")
        private Double price;

        @JsonProperty("discountPrice")
        public Integer discountPrice() {
            return priceOld - Math.toIntExact(Math.round(price * priceOld));
        }

        @JsonProperty("discountCart")
        public Integer discountCart(){
                if (getPrice() == 1){
                        return 1;
                } else {
                        return (int)(getPrice() * 100);
                }
        }

        @ManyToOne
        @JoinTable(name = "book2genre",
                joinColumns = {@JoinColumn(name = "book_id")},
                inverseJoinColumns = {@JoinColumn(name = "genre_id")})
        private GenreEntity genre;

        @ManyToMany(fetch = FetchType.LAZY)
        @JoinTable(name = "book2tag",
                joinColumns = {@JoinColumn(name = "book_id")},
                inverseJoinColumns = {@JoinColumn(name = "tag_id")})
        private List<TagEntity> tagList = new ArrayList<>();

        @OneToMany(mappedBy = "bookId", cascade = CascadeType.REMOVE)
        @JsonIgnore
        private List<BookFileEntity> fileList = new ArrayList<>();

        @OneToMany(mappedBy = "bookId", cascade = CascadeType.REMOVE)
        @JsonIgnore
        private List<BookReviewEntity> reviewList = new ArrayList<>();

        @Enumerated(EnumType.STRING)
        private Book2UserTypeEntity.StatusBookType status;

        private Integer rating;

        @Column(name = "count_postponed")
        private Integer numberOfPosponed;

        @Column(name = "count_purchased")
        private Integer numberOfPurchased;

        @Column(name = "quantity_basket")
        private Integer quantityTheBasket;

        @Column(name = "count_of_views")
        private Integer countOfViews;

        private Integer popularity;

        @OneToMany(fetch = FetchType.LAZY)
        @JoinTable(name = "book2user",
                joinColumns = {@JoinColumn(name = "book_id")},
                inverseJoinColumns = {@JoinColumn(name = "user_id")})
        @JsonIgnore
        private List<UserEntity> listUser = new ArrayList<>();

        @Override
        public String toString() {
            return "Title {" + getTitle() + "}";
        }

}
